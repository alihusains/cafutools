package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"strconv"
	"time"
)

const (
	EnvironmentProd    = "prod"
	EnvironmentStaging = "staging"

	PreCheck  string = "pre_check"
	PostCheck string = "post_check"

	CatalogProdUrl          = "https://catalog.cafu.app/api"
	MediaProdUrl            = "https://media.cafu.app/api"
	OperationalAssetProdUrl = "https://operational-assets.cafu.app/api"

	BatteryVerticalIDProd   = "3"
	ServicingVerticalIDProd = "5"
	TyreVerticalIDProd      = "4"

	PhotoCheckIDProd = 1
	NotesCheckIDProd = 2

	CatalogStagingUrl          = "https://catalog.global.staging.cafu.app/api"
	MediaStagingUrl            = "https://media.global.staging.cafu.app/api"
	OperationalAssetStagingUrl = "https://operational-assets.global.staging.cafu.app/api"

	BatteryVerticalIDStaging   = "22"
	ServicingVerticalIDStaging = "24"
	TyreVerticalIDStaging      = "23"

	PhotoCheckIDStaging = 34
	NotesCheckIDStaging = 35
)

type Product struct {
	ProductID int `json:"product_id"`
}

type PayloadBody struct {
	Products []Product `json:"products"`
}

type OpsAsset struct {
	ID uint `json:"id"`
}

type OpsAssetsResp struct {
	Data []OpsAsset `json:"data"`
}

type Check struct {
	CheckID    int    `json:"check_id"`
	Category   string `json:"category"`
	IsRequired bool   `json:"is_required"`
}

type MediaRelation struct {
	OwnerID      string `json:"owner_id"`
	OwnerType    string `json:"owner_type"`
	OwnerService string `json:"owner_service"`
}

type PipelineRunner struct {
	pool   chan struct{}
	client *http.Client

	CatalogUrl           string
	MediaUrl             string
	OperationalAssetsUrl string

	VariationIDs []int
	VerticalID   string

	PhotoCheckID int
	NotesCheckID int

	// MediaIDs is the media id of the catalog item which should be attached to all its variations
	MediaIDs []int
}

func NewPipeLineRunner(env string, verticalID string, variationIDs []int, mediaIDs []int) *PipelineRunner {
	if env == EnvironmentProd {
		return &PipelineRunner{
			pool:                 make(chan struct{}, 3),
			client:               &http.Client{},
			CatalogUrl:           CatalogProdUrl,
			MediaUrl:             MediaProdUrl,
			OperationalAssetsUrl: OperationalAssetProdUrl,
			VariationIDs:         variationIDs,
			VerticalID:           verticalID,
			PhotoCheckID:         PhotoCheckIDProd,
			NotesCheckID:         NotesCheckIDProd,
			MediaIDs:             mediaIDs,
		}
	}

	return &PipelineRunner{
		pool:                 make(chan struct{}, 3),
		client:               &http.Client{},
		CatalogUrl:           CatalogStagingUrl,
		MediaUrl:             MediaStagingUrl,
		OperationalAssetsUrl: OperationalAssetStagingUrl,
		VariationIDs:         variationIDs,
		VerticalID:           verticalID,
		PhotoCheckID:         PhotoCheckIDStaging,
		NotesCheckID:         NotesCheckIDStaging,
		MediaIDs:             mediaIDs,
	}
}

func (p *PipelineRunner) Add() {
	p.pool <- struct{}{}
}

func (p *PipelineRunner) Release() {
	<-p.pool
}

func (p *PipelineRunner) GetAssetIDs() []uint {
	serviceID := p.VerticalID
	baseUrl := p.OperationalAssetsUrl

	url := fmt.Sprintf("%s/v1/operational-assets/?service_ids=%s&page=1&per_page=100",
		baseUrl, serviceID)
	fmt.Println("url***\n", url)

	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		log.Fatalf("Error creating new http req: %v", err)
	}

	req.Header.Set("Content-Type", "application/json")

	resp, err := p.client.Do(req)
	if err != nil {
		panic(err)
	}

	defer resp.Body.Close()

	fmt.Println("Response Status for the getOpsAssetIDs:", resp.Status)

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Fatalf("Error reading response body: %v", err)
	}

	var opsAssetResp OpsAssetsResp

	err = json.Unmarshal(body, &opsAssetResp)
	if err != nil {
		log.Fatalf("Error unmarshaling JSON response: %v", err)
	}

	var assetIDs []uint
	for _, asset := range opsAssetResp.Data {
		assetIDs = append(assetIDs, asset.ID)
	}

	// Print the unmarshalled data
	// fmt.Println("AssetIDs are:", assetIDs)

	return assetIDs
}

func (p *PipelineRunner) MapAssetsToVariations(assetID string) {
	variationIDs := p.VariationIDs
	baseUrl := p.OperationalAssetsUrl

	fmt.Println("printing assetID", assetID)

	p.Add()

	go func() {
		defer p.Release()

		url := fmt.Sprintf("%s/v1/operational-assets/%s", baseUrl, assetID)

		fmt.Println("url***\n", url)

		var products []Product
		for _, variationID := range variationIDs {
			products = append(products, Product{ProductID: variationID})
		}

		payload := PayloadBody{Products: products}

		// Marshal the payload to JSON
		jsonData, err := json.MarshalIndent(payload, "", "  ")
		if err != nil {
			log.Fatalf("Error marshaling payload to JSON: %v", err)
		}

		// Print or save the JSON payload to a file
		// fmt.Println(string(jsonData), "payload is")

		req, err := http.NewRequest("PATCH", url, bytes.NewBuffer(jsonData))
		if err != nil {
			panic(err)
		}

		req.Header.Set("Content-Type", "application/json")

		resp, err := p.client.Do(req)
		if err != nil {
			panic(err)
		}

		defer resp.Body.Close()

		fmt.Println("response Status:", resp.Status, assetID)

		if resp.StatusCode == http.StatusServiceUnavailable || resp.StatusCode == http.StatusBadGateway {
			time.Sleep(30 * time.Second)
		}
	}()
}

func (p *PipelineRunner) MapChecksToVariations(variationID int) {
	fmt.Println("Printing variationID", variationID)

	baseUrl := p.CatalogUrl
	photo := p.PhotoCheckID
	notes := p.NotesCheckID

	checkIDs := []int{photo, notes}
	checks := []string{PreCheck, PostCheck}

	p.Add()

	go func() {
		defer p.Release()

		for _, checkStage := range checks {
			for _, checkID := range checkIDs {
				checkPayload := Check{
					CheckID:    checkID,
					Category:   checkStage,
					IsRequired: false,
				}

				if checkPayload.CheckID == photo {
					checkPayload.IsRequired = true
				}

				fmt.Println("Payload for checks mapping is", checkPayload)
				url := fmt.Sprintf("%s/v1/variations/%d/checks",
					baseUrl, variationID)

				fmt.Println("url***\n", url)

				// Marshal the payload to JSON
				jsonData, err := json.MarshalIndent(checkPayload, "", "  ")
				if err != nil {
					log.Fatalf("Error marshaling payload to JSON: %v", err)
					continue
				}

				// Print or save the JSON payload to a file
				fmt.Println("Payload is", string(jsonData))

				req, err := http.NewRequest("POST", url, bytes.NewBuffer(jsonData))
				if err != nil {
					log.Printf("Error creating request: %v", err)
					continue
				}

				req.Header.Set("Content-Type", "application/json")

				resp, err := p.client.Do(req)
				if err != nil {
					log.Printf("Error sending request: %v", err)
					continue
				}

				defer resp.Body.Close()

				fmt.Printf("*** Response status: %s & variationID: %d ***\n", resp.Status, variationID)

				if resp.StatusCode == http.StatusServiceUnavailable || resp.StatusCode == http.StatusBadGateway {
					time.Sleep(30 * time.Second)
				}
			}
		}
	}()
}

func (p *PipelineRunner) MapMediaToVariations(variationID int) {
	fmt.Println("Printing variationID", variationID)

	variationIDStr := strconv.Itoa(variationID)
	baseUrl := p.MediaUrl
	mediaIDs := p.MediaIDs

	p.Add()

	go func() {
		defer p.Release()

		for _, mediaID := range mediaIDs {
			mediaPayload := MediaRelation{
				OwnerID:      variationIDStr,
				OwnerType:    "variations",
				OwnerService: "catalog",
			}

			fmt.Println("Payload for media mapping is", mediaPayload)

			url := fmt.Sprintf("%s/v1/media/%d/relations", baseUrl, mediaID)

			fmt.Println("url***\n", url)

			// Marshal the payload to JSON
			jsonData, err := json.MarshalIndent(mediaPayload, "", "  ")
			if err != nil {
				log.Fatalf("Error marshaling payload to JSON: %v", err)
				continue
			}

			// Print or save the JSON payload to a file
			fmt.Println("Payload is", string(jsonData))

			req, err := http.NewRequest("POST", url, bytes.NewBuffer(jsonData))
			if err != nil {
				log.Printf("Error creating request: %v", err)
				continue
			}

			req.Header.Set("Content-Type", "application/json")

			resp, err := p.client.Do(req)
			if err != nil {
				log.Printf("Error sending request: %v", err)
				continue
			}

			defer resp.Body.Close()

			fmt.Println("Response Status:", resp.Status, variationID)

			if resp.StatusCode == http.StatusServiceUnavailable || resp.StatusCode == http.StatusBadGateway {
				time.Sleep(30 * time.Second)
			}
		}
	}()
}

func RunOpsAsset(p *PipelineRunner) {
	opsAssetIDs := p.GetAssetIDs()
	fmt.Println("AssetIDs are", opsAssetIDs)

	fmt.Println("VariationIDs are", p.VariationIDs)

	if len(opsAssetIDs) == 0 {
		fmt.Println("Returning as no operational assetIDs present for given service_id")
		return
	}

	for i := 0; i < len(opsAssetIDs); i++ {
		p.MapAssetsToVariations(strconv.Itoa(int(opsAssetIDs[i])))

		if i%10 == 0 {
			time.Sleep(1 * time.Second)
		}
	}

	time.Sleep(10 * time.Second)
}

func RunPrePostChecks(p *PipelineRunner) {
	variationIDs := p.VariationIDs

	for i := 0; i < len(variationIDs); i++ {
		p.MapChecksToVariations(variationIDs[i])

		if i%10 == 0 {
			time.Sleep(1 * time.Second)
		}
	}

	time.Sleep(30 * time.Second)
}

func RunMediaRelations(p *PipelineRunner) {
	variationIDs := p.VariationIDs

	for i := 0; i < len(variationIDs); i++ {
		p.MapMediaToVariations(variationIDs[i])

		if i%10 == 0 {
			time.Sleep(1 * time.Second)
		}
	}

	time.Sleep(10 * time.Second)
}

/***
	DON'T NEED TO MODIFY ANYTHING ABOVE THIS LINE UNLESS TO CHANGE THE FUNCTIONALITY
***/

/*
Follow these steps to get the IDs list.
1. Get the item_id(s) from item_verticals based on the {Battery/Servicing/Tyre}VerticalID{Prod/Staging}
	SELECT
		STRING_AGG(item_id::text, ',') AS item_ids
	FROM
		item_verticals iv
	WHERE
		iv.vertical_id = 23; // Eg: Tyre vertical ID in staging.

2. Get the ids from variations table based on the item_id(s) from step 1.
	SELECT
		STRING_AGG(id::text, ',') AS ids
	FROM
		variations v
	WHERE
		v.item_id = 68; // Eg: Economy catalog item ID in prod.
*/

// Get the latest list from DB and include all of them here (existing and newly added ones)
var BatteryVariationIDsProd = []int{
	233, 229, 239, 230, 227, 232, 71, 86, 95, 96, 75, 78, 90, 93, 74, 85, 92, 94, 83, 98, 79, 82, 76, 80, 77, 88, 91, 72, 81, 84, 87, 241, 228, 242, 234, 240, 243, 238, 628, 236, 97, 231, 235, 73, 89, 237,
}

// Get the latest list from DB and include all of them here (existing and newly added ones)
var ServicingVariationIDsProd = []int{
	// 5, 277, 330, 335, 309, 306, 278, 265, 635, 313, 261, 272, 318, 304, 326, 308, 298, 289, 266, 279, 636, 637, 638, 639, 286, 640, 641, 642, 643, 644, 645, 646, 262, 294, 333, 259, 297, 273, 287, 291, 267, 268, 311, 320, 303, 302, 269, 327, 263, 270, 288, 324, 328, 321, 284, 305, 332, 299, 283, 276, 312, 331, 281, 292, 317, 271, 310, 316, 300, 323, 280, 295, 325, 275, 285, 260, 264, 274, 282, 293, 296, 301, 307, 314, 315, 319, 322, 329, 334, 352, 343, 409, 340, 375, 370, 374, 360, 388, 402, 347, 358, 383, 366, 394, 408, 345, 372, 364, 381, 346, 350, 336, 411, 341, 413, 365, 361, 391, 362, 344, 390, 399, 342, 378, 368, 357, 380, 385, 377, 367, 369, 389, 338, 387, 354, 404, 401, 403, 410, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 353, 355, 373, 356, 359, 398, 371, 400, 406, 363, 376, 379, 382, 384, 386, 392, 393, 395, 397, 405, 407, 412, 337, 339, 348, 349, 351, 502, 486, 503, 493, 495, 456, 446, 488, 483, 416, 470, 474, 429, 463, 454, 435, 462, 508, 439, 432, 428, 423, 482, 458, 448, 440, 491, 455, 500, 441, 420, 426, 461, 442, 419, 467, 453, 449, 436, 477, 468, 460, 443, 465, 425, 444, 499, 434, 485, 418, 430, 479, 494, 505, 489, 414, 451, 498, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 415, 417, 421, 422, 424, 427, 431, 433, 437, 438, 445, 447, 450, 452, 457, 459, 464, 466, 471, 472, 475, 476, 478, 480, 481, 484, 487, 490, 492, 496, 497, 501, 506, 507, 509,
5,2185,2064,2150,326,564,275,311,557,561,298,320,513,2061,563,297,329,535,559,2049,560,294,555,2147,261,2170,268,281,515,310,544,565,128,278,312,532,539,566,263,2070,130,571,2058,127,277,520,522,554,640,2048,287,308,518,545,567,568,639,2068,131,136,293,550,2171,581,2053,548,582,284,285,309,512,527,573,2071,317,517,546,2151,580,574,642,300,637,259,295,325,2149,145,137,274,132,143,292,290,139,2056,129,135,2152,323,579,643,302,322,264,541,645,2060,328,529,2051,549,134,273,551,523,2063,2066,305,569,314,537,3499,3500,3501,3502,3503,3504,3505,3506,3507,3508,3509,3510,3511,3512,3513,3514,3515,3516,3517,2055,2069,291,335,266,299,330,562,577,514,570,519,646,265,282,536,327,270,313,142,146,316,141,578,126,576,543,303,307,538,525,301,306,333,540,2054,2050,2148,2047,2065,2067,2169,318,279,542,148,140,572,524,553,644,324,534,575,635,315,276,319,530,547,558,641,144,267,638,334,2059,2057,2146,283,511,260,133,147,289,531,526,321,556,269,280,516,138,636,2052,304,288,521,271,125,296,272,533,528,332,331,552,286,262,2062,362,363,365,387,2075,162,151,336,337,351,352,358,364,149,2094,403,2091,2177,372,379,347,375,386,653,2098,176,382,399,647,2078,182,181,165,167,338,344,163,2153,179,343,353,410,2173,174,657,2079,152,349,374,385,164,2076,2154,651,2083,2093,371,171,366,373,2155,648,169,2072,2080,2092,342,392,2087,159,377,2096,2156,341,400,408,2172,654,183,173,397,413,2082,168,383,656,2085,650,405,2077,155,396,339,150,354,390,2174,3518,3519,3520,3521,3522,3523,3524,3525,3526,3527,3528,3529,3530,3531,3532,3533,3534,3535,3536,3537,384,172,2159,153,178,404,166,2175,2176,369,378,407,2088,2073,412,350,2081,158,177,649,175,348,360,406,170,355,401,160,380,376,357,411,409,389,394,180,156,361,381,652,346,356,367,395,398,370,388,402,154,161,345,391,340,359,393,368,2090,2089,157,2097,2074,2160,2084,2095,655,2157,2158,2161,2086,470,485,504,658,663,430,217,673,676,2106,225,451,460,681,662,2121,456,2122,486,203,226,445,436,483,496,449,2167,2101,434,212,476,500,2103,2113,2115,201,426,439,498,184,427,440,441,477,479,446,494,508,207,221,186,199,204,222,192,469,419,454,493,675,503,224,435,2112,2114,495,497,491,2165,2109,2116,2124,461,2183,674,210,463,2120,487,2163,2119,2102,661,448,471,2117,185,502,2104,195,416,422,432,466,668,671,206,447,481,499,219,223,431,501,664,670,677,678,680,2123,205,213,415,428,666,2184,191,421,474,478,2110,2111,2162,468,480,489,659,193,209,218,423,492,679,197,208,215,420,672,187,443,459,473,669,2181,190,211,442,425,433,464,472,2166,2180,437,438,188,457,2099,189,200,417,214,458,484,424,444,509,665,667,198,429,462,482,488,660,2168,194,414,450,475,490,202,216,452,2100,2107,196,418,455,2105,2164,453,2118,2178,2179,507,506,2182,2108,467,465,3538,3539,3540,3541,3542,3543,3544,3545,3546,3547,3548,3549,3550,3551,3552,3553,3554,3555,3556,3557,220,505,510,






}

// Get the latest list from DB and include all of them here (existing and newly added ones)
var TyreVariationIDsProd = []int{
	

1934,856,2727,2510,1538,2763,2000,1118,1293,924,857,2396,866,3027,1500,2884,868,799,922,602,869,3030,3566,3567,2474,3568,1881,1553,2592,925,993,2661,870,3569,3570,873,2550,2022,2596,2598,3798,1590,1692,1465,1939,2889,2684,1887,2494,923,2599,2600,867,790,1462,2513,1787,2601,2604,2606,2611,3031,783,2648,2612,784,2514,2615,2490,1378,1007,3032,2617,3033,3574,1602,2516,737,2469,2530,2610,3035,2518,696,2750,1545,2441,2766,2381,1828,3575,1305,3331,2618,2619,2621,2624,3576,2018,3250,3577,2625,1237,1837,1709,1895,2735,1650,1374,1606,1906,1720,2019,1210,1407,926,3799,1079,1470,1366,2675,2020,2453,2578,1690,871,1654,881,3578,1331,599,1380,1735,2380,1840,3333,2428,2677,1704,2805,885,3579,2703,1518,2639,1591,1449,1409,2707,1749,1318,2781,2679,888,2594,1410,3580,3036,3037,3038,3039,3040,601,2713,2553,863,1585,788,1565,1766,1300,2495,2890,3041,3042,3043,3044,1933,1450,1240,762,2899,1713,2629,2565,1428,2791,2564,2749,1435,1631,1241,1220,985,1242,1243,1244,1413,3801,1193,1051,1320,1251,931,1503,2387,3582,2579,1357,2580,933,3583,1750,934,1354,2388,1834,936,1415,2901,1563,1168,1416,1245,939,3045,3046,3047,3048,3049,899,771,2804,2807,2769,2391,1463,1882,2476,2519,3586,782,3587,1680,2392,3050,3052,1639,3053,2544,1825,3588,3054,3589,3592,3594,3595,942,1183,1430,1335,995,1192,1846,1607,1506,1453,1336,1191,2489,1444,946,3806,1564,1719,1439,2511,2517,1891,604,3341,1507,3596,3597,1420,2654,3598,947,3599,3602,970,948,949,3343,3603,1525,3055,3056,2764,3057,3604,1833,3605,3606,900,1730,3058,1170,2400,950,1359,978,2784,1537,977,1137,603,952,1768,3607,1771,2698,3061,3348,3608,1454,706,2831,3609,2686,3610,3611,2403,1376,2484,880,904,2556,3062,2847,1660,1634,1618,2404,997,708,980,2670,3612,1431,2902,908,3613,2584,600,1049,3350,3063,1195,3614,2869,854,2756,2543,1467,914,1056,3615,943,973,2851,2405,3064,1057,1898,2896,1543,1338,1058,2682,953,998,806,1315,712,2852,981,1697,2460,1061,1469,1567,1067,2898,3065,3066,2413,3616,3617,1301,1068,2887,1656,836,1589,2802,2614,1070,2897,1655,3067,3068,3069,736,1333,1347,2572,2666,920,1223,2853,3071,3618,3072,1652,1071,1524,1804,1835,2768,1072,1731,1919,2414,3619,815,1075,3073,3074,1155,2009,723,2417,1423,1247,3075,2875,1081,3620,2736,1997,3356,1604,2705,1562,2741,1082,731,955,972,1772,3621,3076,1355,1785,1083,1325,1339,2418,738,1424,1001,741,1194,3077,3622,3078,3080,3081,3084,3357,1923,1012,3623,1596,1084,3624,1174,1166,1087,3359,3625,3626,3627,1088,3360,2622,1089,1093,1094,2645,1874,859,987,911,2528,1096,1097,1526,1363,3085,2420,976,906,1100,1780,2390,694,1581,3086,1608,1103,2421,3628,3629,3630,2426,1888,1158,2721,3087,3631,1172,1523,3632,1104,1517,3089,1175,3091,1106,1107,974,2422,1116,3092,795,855,1425,956,1513,1862,1340,1003,1119,1120,3093,3094,3633,3634,3635,3636,3637,2706,958,1790,1171,1341,1212,959,1216,1217,2767,2638,1121,728,1122,1123,3095,3098,2635,1426,3638,960,1165,3099,3639,3640,2859,3376,1169,967,2529,1592,1324,2423,975,961,3813,1181,1124,1869,1200,2744,2812,1464,1125,1941,1610,1455,2903,1698,962,963,1274,2430,965,3641,2483,1760,3642,989,3380,3100,3101,3102,3104,3643,3644,3645,3384,3385,3646,2762,2674,3105,2525,724,2843,3106,3107,1126,2602,964,1127,1839,2429,3109,3110,2497,2633,1549,2512,1128,1316,2603,1129,3111,1521,3112,3113,3114,3115,3116,3117,3118,3119,3120,3317,1311,3647,2478,1130,745,2688,2473,1633,1508,891,2384,3648,3649,1764,3650,3651,1797,2570,1131,1812,1356,3121,3652,2850,2393,1672,1132,1369,1294,2607,3653,1901,1813,1133,3122,746,3391,1794,1605,2552,1134,2521,3123,909,1559,2433,1159,1511,837,3654,1632,2475,1908,2532,1015,1135,1136,2779,1162,1258,2435,1236,2658,2436,3655,2021,2451,1167,1954,1955,1956,1248,1259,2442,3392,3656,1770,2801,805,2616,1741,1138,3657,3658,887,2738,3659,1445,1657,2443,3393,3394,1157,2438,1249,2631,3124,3125,3126,3127,3128,3660,1568,2425,2717,2771,1646,1141,889,1544,2461,1140,2672,2613,1303,2446,968,1648,1142,1145,1921,1262,3818,2757,2835,3661,3662,3663,892,2450,2663,3396,3664,1147,1344,3665,984,2439,894,2906,1146,3129,3130,3131,905,3132,1149,2806,1337,1434,829,1531,1721,2774,927,3666,2440,3133,3134,3135,3136,3137,1345,1002,1252,932,3138,2444,3462,3139,2445,1260,3140,3141,1414,1736,697,3142,3820,1451,982,2447,3667,3668,3669,2448,2449,1514,3143,3144,3145,3670,1861,1621,3671,3672,938,1182,2458,1509,3821,3822,3146,1139,3673,1152,1261,3147,3148,3149,3150,3151,940,3157,3158,941,1263,988,1154,2689,3152,3153,3674,3675,1161,852,1417,3159,3162,1458,1728,822,1308,1579,3163,1767,3167,1233,3169,3171,3172,3173,1224,3174,3676,2702,1264,860,2626,3175,3176,3177,1163,2462,1448,6,2825,1701,3179,730,843,2808,1418,3182,3677,3088,3181,3678,1900,3679,3680,1419,1459,3019,3154,3155,3156,3681,3682,3683,3685,3686,3183,3687,2595,3184,2637,3185,1177,1184,1505,1185,1006,2466,1008,1009,944,3186,3192,3193,3194,3197,3198,3408,986,3201,3688,896,3689,1716,1644,945,1186,1188,3160,3161,2740,3690,3691,3692,3693,3202,3684,1299,928,3203,3204,1630,1510,2694,1625,1703,3206,3694,3410,2401,3695,3696,2399,1408,951,1239,2402,1421,2459,1456,1005,3164,3208,3210,3211,1010,2609,1044,2748,1076,1801,1026,1490,1199,1617,1686,3165,3258,2427,1189,3698,3699,1905,3701,2710,1296,3212,1190,1929,1752,3213,1533,1173,2758,2641,1196,2410,1723,1197,3214,2729,1198,1535,3215,1685,1225,1206,3702,1481,1201,3703,3705,1269,1422,1622,3216,3218,3228,3229,2590,2809,1594,1474,598,1202,1011,1580,1203,1211,3706,1725,2632,702,1213,2407,2940,1520,1218,3168,3707,3708,1851,1361,2470,1330,751,1235,929,3230,3231,966,3232,2408,930,1253,1555,2947,2683,2821,3233,793,1254,1267,3709,3710,1019,3170,3712,3713,3714,3716,3720,3416,1234,1765,1238,1322,1323,1013,3234,1014,3241,2647,3242,1744,3243,1383,2715,3253,1021,1298,1808,2537,3255,1443,2588,1384,2523,597,3722,3729,3731,3259,3261,1052,1386,1387,1207,1332,3262,1548,1712,935,1268,1105,1016,1389,1390,1761,3178,1391,1272,3733,3180,3739,3742,3743,1018,3263,1221,3744,1017,1295,990,3264,3265,1651,1546,1270,3697,2002,2003,1020,1271,1208,1570,1045,1022,1447,1023,2795,1497,1256,1064,3745,3746,1496,937,3267,3748,3749,3751,3270,1504,1024,3271,1027,1028,1164,1066,1222,1030,3752,1031,1491,1204,1032,1226,1441,1695,1903,1738,3700,1334,1038,1231,1273,1033,2846,1080,3187,1495,3272,3273,3275,994,1034,1209,1035,1287,1232,1976,1327,3188,3276,3277,3278,2395,3753,1036,1037,3754,3189,3463,3429,3755,1091,1228,3464,2506,1593,2467,1004,2630,979,3279,3704,794,1864,1512,1980,1978,2841,1979,1981,1983,1246,3756,2509,1352,1039,1230,1486,1984,3280,1040,3190,734,3191,1109,2398,3435,3757,3438,3758,3759,3281,707,1487,3284,2900,2385,1733,1498,1678,1499,921,1475,2712,3761,2861,3762,1990,1993,2941,2944,2952,1041,3285,1699,3286,3287,1739,2755,1317,1707,2858,3763,2971,999,2823,2964,2969,2974,1947,2984,2671,3764,2864,2416,2976,2982,2983,2697,3195,1658,1143,1948,1949,1950,3012,3449,3765,1836,2986,1179,2866,954,1043,2867,1973,2985,2868,2987,2990,2991,2412,2468,1000,1405,1974,1975,2992,3288,1150,1480,2993,3289,825,969,983,1542,2394,3290,2803,1850,1187,1402,957,3196,3766,1977,3291,3292,1381,2644,3293,3294,2999,3767,3769,1583,3000,3001,3002,3003,1951,3770,1205,1377,918,1151,1214,1215,3005,2669,1684,1722,1153,1922,1824,1677,3295,809,1219,1342,1943,3006,2554,3009,1952,3010,3011,3013,3014,3016,3020,2379,3771,1599,1427,1385,1494,3017,3428,3772,1830,2589,1255,2545,1705,1388,2775,1953,1957,3773,3024,2770,2415,1160,3225,1290,1291,3021,3297,3298,3103,739,726,3443,3711,3444,3774,1958,3775,3445,3778,2502,3779,845,2811,1959,3025,3780,3781,2733,3018,3199,3200,1178,1461,3299,3436,3783,1960,2708,1539,1961,1962,3437,1460,2878,3465,2908,1963,1629,3296,1964,1965,847,2760,3026,3301,3302,2515,2659,2522,3303,1527,1932,3784,747,3300,3785,2004,2001,1682,1638,2690,2817,3786,3788,1967,2597,1029,2006,3789,1806,2464,1364,2005,1915,2730,2673,3790,2007,2010,2608,2773,2008,3023,1664,2011,2472,1982,2012,3304,2013,828,1811,3305,1676,1556,1292,3791,2508,2014,3205,1944,1945,3307,832,3308,2880,786,1726,3309,3310,3792,1970,2566,1689,1575,1971,1659,2711,1972,3207,3209,3311,3312,2015,1379,1392,3313,1838,1809,2687,1180,2016,2482,1275,1276,1394,1395,2800,1304,1473,3793,3796,3797,3800,3802,3803,1397,3453,1278,3028,3217,3315,3316,3318,1398,3319,3320,840,897,1348,1399,1313,1489,1279,1476,1477,3804,1746,710,1478,2844,1382,2481,1817,1265,1479,2777,1694,1280,3029,3219,3220,3221,3450,3805,3807,3808,1619,1802,1791,1321,1401,2498,1561,1574,1696,1501,1931,1483,3451,1482,1227,2487,3034,3323,2499,1349,912,3324,1442,877,2886,3222,3223,3224,3325,3326,3327,3328,3329,1541,3809,1636,2501,1789,1440,1283,1831,1860,1552,1284,3810,3811,1285,2503,1857,992,3812,2725,1286,1229,1307,1403,2653,1343,3330,3332,2662,1942,898,3334,3814,3815,1502,2840,1751,1516,1484,1266,2860,3816,1485,1350,1288,1588,1793,1351,1492,3226,3817,3227,3819,1890,3454,2562,901,2747,902,2605,3335,2582,3336,3337,3338,2726,3339,1530,1845,2739,1360,1946,1289,1493,1821,917,1328,1406,3571,1488,719,1884,1053,1597,1281,834,1054,804,2828,886,816,971,764,1598,879,1582,3572,3573,1050,2830,3060,1536,743,1047,2799,2754,1775,1774,1577,721,1740,1827,757,3340,3342,3344,3345,2534,1788,3346,1055,1920,2657,3235,1472,3236,3237,3347,3349,3351,3352,3355,915,1635,1059,3238,1060,2491,3239,3306,3353,3354,2567,1863,2535,749,2536,2665,1916,3240,2776,1436,2910,1062,1063,2620,2623,3358,3361,1065,1042,3362,3363,3364,774,1693,725,2845,2500,3244,3456,1640,1756,2539,715,1069,3245,3246,3365,3366,3367,3368,2833,1673,875,2547,2548,1810,3369,3370,1277,1396,760,789,720,1674,1925,1073,1074,3247,3371,3372,718,2752,1571,732,791,3248,3373,3374,3375,2531,2555,2431,1747,3459,3460,2650,1077,3249,2583,3251,3377,3378,3379,2557,2788,1624,1854,2558,1815,2432,1085,2778,1086,3381,3382,3383,1603,1666,1522,872,2540,2559,862,1438,807,2656,780,1614,800,1820,3252,827,3386,3387,3388,1090,882,1353,803,838,1732,755,893,717,3166,3581,742,2820,1912,1859,1826,1092,3389,3390,3395,3254,1611,2719,1966,3584,1528,2742,1645,3585,2504,1600,3097,2786,2814,1411,1095,2382,3397,3398,3399,883,1346,2568,1612,2696,2488,1412,1098,1099,3256,3257,3400,3401,3402,1257,1358,2695,711,831,1554,1927,3590,874,1755,890,1297,1870,3591,1665,991,1856,821,2660,3403,3404,1101,3405,1911,3406,1102,3407,3409,763,744,1148,3108,1799,2701,2794,3260,2723,2787,2575,1784,1902,1108,1110,3411,3412,1763,3413,773,1778,2576,3414,1429,2577,713,733,1560,814,1773,700,2753,2783,729,753,2627,1111,2815,2693,1112,2628,3565,709,714,595,2818,1894,2746,1823,1762,1688,2855,2796,735,2856,1595,1113,850,3266,1679,1114,916,3268,3269,1865,2563,2434,2857,1913,754,1781,1117,740,756,758,1814,3415,3417,813,2862,1777,2667,851,3418,3419,2524,810,765,767,768,3593,769,2836,2546,1649,2541,3420,1250,770,2863,3421,910,2477,2728,3422,2893,776,1829,2700,1968,2389,3423,3424,2765,1969,3425,3426,2905,3427,3430,1367,777,778,1620,2551,779,2471,1848,3600,781,3601,1938,2865,1626,785,1647,3274,3431,3432,1613,2909,792,2651,2463,797,2581,1683,2692,798,2798,2526,2870,2871,2872,2873,1681,1370,2642,2722,808,811,1782,2569,2573,812,2876,1816,1748,2895,1668,817,907,1893,818,2888,1176,2789,705,3433,849,3434,2877,819,1855,2912,1940,820,1432,823,3439,787,858,3440,3441,2751,2017,2664,1832,826,2680,824,2879,775,830,833,835,839,1928,841,2881,1786,842,865,1433,844,848,2882,2542,1669,1936,2681,2724,846,3442,1309,1743,2883,853,2907,2759,1671,1907,1452,2810,3446,2533,3447,2816,802,1985,1986,3448,3452,1616,1987,1988,3455,3457,2649,1989,2685,3458,3461,1991,2652,1587,1883,3715,1867,796,2709,1792,1858,2842,1687,1992,2678,2718,722,1994,1995,1306,1025,3717,3718,1573,864,1996,2720,1998,1871,2848,919,2839,2938,2419,1641,2822,1852,1578,3719,801,1310,2455,2939,2507,3721,1623,2826,2486,2829,1899,2640,2942,2668,1551,2943,1326,1880,1745,2452,2945,2549,2838,2790,2493,3723,3724,2591,2946,1661,1529,2636,1800,2948,1601,1711,2949,1312,3725,2643,1727,703,2950,1757,2951,1446,1904,1714,2761,1615,3726,3727,1917,1362,2953,2456,2954,2955,2560,695,996,1807,1999,1115,3728,698,2956,2957,2465,2527,2958,2959,1702,2960,2676,1675,1708,759,3730,2772,2961,1753,2962,1566,2797,2834,2891,2963,2457,1843,3732,1466,1776,2965,1897,1046,2966,2967,2409,1889,2968,1627,2386,3734,2646,3735,1742,1930,2970,2406,1653,2972,1803,878,2561,2973,1841,2496,1048,3736,3737,2745,2975,2691,2479,2977,2593,2832,2978,2655,1558,1759,727,2785,3738,1842,2979,2980,1783,752,1314,2981,1532,2716,2485,2892,1372,1918,2437,3740,3741,2988,1663,2989,2913,2793,2994,2995,704,2996,2743,1737,1818,2997,2998,1706,1609,1873,1670,3747,1796,1795,596,3004,1754,1572,3750,3007,3008,1437,1576,3015,1584,1875,3022,3760,3768,3051,3059,1550,3776,3777,2397,3070,3782,3079,3282,3283,3082,3083,3787,1910,761,3090,2904,1844,2585,1400,3096,3794,3795,1909,1643,2854,1329,1540,2699,2586,1471,1691,1937,2780,2849,1569,1926,2837,2704,1586,861,3321,766,2571,3322,2714,2782,2813,1373,1718,1879,1282,1822,2634,1557,2424,2732,2520,1758,1805,1371,2894,1375,1393,1892,1667,2731,1468,1849,1779,2587,2885,1734,876,1769,1515,1819,1868,1729,2911,1715,1078,2734,2411,1847,1457,2574,1724,2827,2505,1717,1885,1866,1547,1302,1935,1886,1700,1662,1404,2792,701,1156,699,1924,2480,1876,1519,903,750,2819,2492,884,1628,748,2824,1144,1368,2874,772,2383,2737,1914,895,913,1637,1710,716,1853,1365,2454,2538,1642,1319,1798,


}

// Get the latest list from DB and include all of them here (existing and newly added ones)
var BatteryVariationIDsStaging = []int{
	13198, 13194, 13212, 13206, 13674, 13671, 13684, 17292, 13203, 13190, 13202, 13208, 13191, 13201, 13213, 13681, 13676, 13679, 13205, 13207, 13193, 13200, 13204, 13211, 13680, 13672, 13188, 13210, 13195, 13196, 13214, 13685, 13192, 13669, 13670, 13682, 13673, 13677, 13675, 13678, 13199, 13189, 13683, 13197, 13209,
}

// Get the latest list from DB and include all of them here (existing and newly added ones)
var ServicingVariationIDsStaging = []int{
	13708, 13709, 13710, 13711, 13712, 13713, 13714, 13715, 13716, 13717, 13718, 13719, 13720, 13721, 13722, 13723, 13724, 13725, 13726, 13727, 13728, 13729, 13730, 13731, 13732, 13733, 13734, 13735, 13736, 13737, 13738, 13739, 13740, 13741, 13742, 13743, 13744, 13745, 13746, 13747, 13748, 13749, 13750, 13751, 13752, 13753, 13754, 13755, 13756, 13757, 13758, 13759, 13760, 13761, 13762, 13763, 13764, 13765, 13766, 13767, 13768, 13769, 13770, 13771, 13772, 13773, 13774, 13775, 13776, 13777, 13778, 13779, 13780, 13781, 13782, 13783, 13784, 13785, 13786, 13787, 13788, 13789, 13790, 13791, 13792, 13793, 13794, 13795, 13796, 13797, 13798, 13799, 13800, 13801, 13802, 13803, 13804, 13805, 13806, 13807, 13808, 13809, 13810, 13811, 13812, 13813, 13814, 13815, 13816, 13817, 13818, 13819, 13820, 13821, 13822, 13823, 13824, 13825, 13826, 13827, 13828, 13829, 13830, 13831, 13832, 13833, 13834, 13835, 13836, 13837, 13838, 13839, 13840, 13841, 13842, 13843, 13844, 13845, 13846, 13847, 13848, 13849, 13850, 13851, 13852, 13853, 13854, 13855, 13856, 13857, 13858, 13859, 13860, 13861, 13862, 13863, 13864, 13865, 13866, 13867, 13868, 13869, 13870, 13871, 13872, 13873, 13874, 13875, 13876, 13877, 13878, 13879, 13880, 13881, 13882, 13883, 13884, 13885, 13886, 13887, 13888, 13889, 13890, 13891, 13892, 13893, 13894, 13895, 13896, 13897, 13898, 13899, 13900, 13901, 13902, 13903, 13904, 13905, 13906, 13907, 13908, 13909, 13910, 13911, 13912, 13913, 13914, 13915, 13916, 13917, 13918, 13919, 13920, 13921, 13922, 13923, 13924, 13925, 13926, 13927, 13928, 13929, 13930, 13931, 13932, 13933, 13934, 13935, 13936, 13937, 13938, 13939, 13940, 13941, 13942, 13943, 13944, 13945, 13946, 13947, 13948, 13949, 13950, 13951, 13952, 13953, 13954, 13955, 13956, 13957, 13958, 14036, 17254, 17255, 17256, 17257, 17258, 17259, 17260, 17261, 17262, 17263, 17264, 17265, 17266, 17267, 17268, 17269, 17270, 17271, 17272, 17273, 17274, 17275, 17276, 17277, 17278, 17279, 17280, 17281, 17282, 17283, 17284, 17285, 17286, 17287, 17288, 17289, 17290, 17291,
}

// Get the latest list from DB and include all of them here (existing and newly added ones)
var TyreVariationIDsStaging = []int{
	16241,20517,20522,18161,20526,16034,16142,20527,20541,20549,20552,20554,20555,16165,20558,19772,20556,20637,17063,16529,16262,20561,15881,20562,16169,16280,20566,16046,16185,16535,17851,20569,17069,16081,20565,20247,16210,16242,16063,20567,16420,20571,17168,16949,16373,15838,20574,17952,20576,20580,16258,16985,17959,17874,20579,20583,16499,19640,16005,15853,19874,19912,20582,16741,20584,16536,19870,16538,20585,16054,20427,20586,15868,16432,16270,20589,20677,16008,16486,20588,16016,20590,15902,16416,20354,20591,16278,17174,17011,16050,20592,20593,17138,20594,18163,16500,20595,19742,19914,20392,17020,17022,17041,20397,20596,15846,16621,16246,20265,17024,17032,16087,16597,20597,20599,18164,16080,20600,17879,16647,20603,20605,16806,16550,20409,20606,16997,16774,16553,20607,15842,20443,16554,16247,20420,20609,16361,20611,19702,17078,20613,19694,19760,16069,20436,17169,20620,16567,16426,20437,20617,16317,15967,16256,15977,20618,16065,20619,16738,16563,16501,20622,20623,16609,19775,16481,20285,20624,15997,20458,16038,20625,16830,19879,16417,17137,16372,15841,19889,16000,20626,16085,19774,20627,16388,16134,16040,20297,20465,20630,16121,16994,17089,16252,16418,19829,20631,16137,16041,20469,19833,19665,20472,20632,15960,16042,16250,20473,20633,16688,18181,15821,18177,16920,20634,17124,20636,16947,19693,16049,18171,16841,20638,20480,16138,16419,17001,16352,18202,18203,20441,20639,16071,20640,19666,16581,20488,20642,20320,19764,20490,19841,15896,20643,16762,16044,16355,17934,20491,20644,16752,17988,15826,15851,20450,20646,20647,17891,16145,17936,20497,20653,20654,16047,15986,20454,16521,20171,16586,20330,20499,16682,16149,15947,20471,16155,20657,20661,17941,16937,16314,20337,19642,20493,20672,17948,20675,86,15864,16161,16329,16623,15893,18116,20501,15927,20515,18189,16605,16150,16327,16112,20682,20183,20516,16685,16340,15918,16168,16386,16421,20726,15940,20185,16086,16784,16820,19896,16307,19898,20507,16544,20351,19887,16422,20524,16793,19861,16171,16706,16333,15787,16116,16030,16668,19902,19905,16172,17965,16178,19919,19921,16880,16179,16549,16408,16965,20546,18168,16291,16309,16186,16498,16839,15957,16334,16311,16276,19709,16197,17863,16313,18184,17038,16201,16035,19796,16453,17216,17967,16211,16321,16012,19686,16214,16757,17045,17774,16892,16895,16493,16506,16583,20570,16275,19699,16217,16221,17868,16272,16496,16457,17048,20572,20587,17064,17897,16052,16507,20573,16039,17973,15969,16222,18160,17972,16343,16330,20604,16640,17182,17975,20575,16286,20577,20615,17080,17917,16070,16263,16331,19729,16531,16089,16057,17082,16259,16260,17224,16587,15950,16091,16092,20578,20635,16983,15966,20189,20645,17162,16243,15974,16800,18174,15979,16265,16093,16269,16096,18011,16306,15981,17958,16349,20581,20371,19814,15985,16282,16102,16379,17968,16611,18110,16104,20373,16289,16110,19831,16341,16295,16105,19854,16113,15989,16430,15802,16018,16115,16119,19720,16539,16120,16298,16312,16342,17046,17043,17049,16889,17050,17051,17056,19740,16345,17053,16139,16126,15965,16631,16467,16576,17057,17060,18009,16384,16099,16143,17009,20175,20212,16151,16159,17058,20164,18091,17188,16162,20165,19802,20383,20167,20202,20224,20274,20216,19855,20166,16281,16164,20168,20385,16167,20169,20172,16722,16767,16176,20387,16750,15892,16353,20390,19636,16177,17128,20298,16182,20173,17150,20315,16192,17015,20322,16117,20174,16540,16199,16669,20176,16202,19893,16842,20335,20348,17021,16273,16255,18002,20344,16391,16705,20355,18073,17190,17040,16881,16207,20357,16212,17052,20358,20361,16374,20362,16578,20725,20177,17126,20178,16224,19683,18078,20366,16228,16649,20181,16233,19727,20369,16294,20182,16907,17085,20184,16297,18201,19782,20179,16856,16348,20370,16474,20378,19819,20380,20381,16462,16464,20187,16061,17044,20188,15784,19696,19835,19730,16458,20195,20396,17065,20394,18106,16557,17803,16401,20403,20412,20416,20421,16577,17047,18085,20426,16736,16095,19689,17025,19697,17067,20190,20191,17695,17006,16777,16775,16451,19875,17927,17066,19920,16490,16415,20192,20423,17033,20424,20429,17852,16608,20222,16376,16365,19856,17070,20194,20428,20434,16056,20432,19828,16580,17026,18119,20197,15800,20196,16375,20198,17031,17816,16004,16205,18092,16764,16328,16799,16368,20248,20439,20440,16658,20438,19915,16492,16968,17072,20199,16337,16356,20201,20598,16612,16546,16477,20203,20447,20448,19803,20204,20449,16358,20453,16497,20207,16780,16552,20205,17076,19844,16473,18079,20463,16378,20455,15998,16571,16020,16562,20210,18204,20206,20208,15926,16950,20601,17079,17083,16886,20464,16489,16739,20466,16106,20214,17028,16359,20602,15915,16520,19765,17145,17717,16515,20209,15978,19811,15980,15982,20213,20215,20475,20476,20478,20218,15968,20481,16804,17120,20484,20485,15983,20512,20235,20211,15794,20452,20220,20508,16135,15959,15888,20221,19652,17696,19849,15931,20608,15923,16537,16141,15920,16146,20457,18166,16208,15807,19753,16593,15875,16482,17010,20223,16954,19719,16360,17115,17219,20460,16721,16885,16849,18162,16816,20462,17178,20217,16785,17719,16556,16941,17920,15956,16305,16114,16468,20219,20610,15996,16616,15806,16147,15877,20225,20226,16887,19650,16901,15961,20228,15840,16435,16651,19739,15942,20229,15848,20612,18218,16982,18222,16561,17165,16404,16865,20230,16136,16153,20233,20614,15988,16883,20616,16363,16671,19761,16154,15867,16769,17697,16687,16815,15827,19701,16219,15804,16444,20232,20234,15849,20628,20227,20236,15739,16181,16579,15971,16656,17984,20237,20238,16163,20239,16183,20629,17870,16338,15952,15830,16814,15837,16166,18120,16681,16367,16788,20240,20241,17003,16742,16198,16427,15858,16518,16097,19881,16188,20242,19928,17102,16395,16443,17090,16001,20641,20231,18093,16751,16152,20280,16232,15937,16189,16545,16195,19678,17689,15799,15812,19824,16633,16719,20243,16922,19891,16200,19771,17181,17105,16370,16406,15832,19649,16660,16132,17112,19886,15964,20244,20245,16371,15934,16078,16850,16749,16914,17116,16383,15850,16206,16798,16938,16827,15885,20246,15899,20250,19851,17092,19716,16960,18096,15955,16831,20251,20664,16808,20252,20253,17081,20254,20665,16283,16566,15958,17113,17013,20255,17133,17108,19834,20256,16977,16606,17772,19822,20257,20259,19888,16213,19901,19895,16196,16864,15870,15871,16074,15879,16698,15856,16646,16261,16693,20261,19924,20262,18173,15828,15808,19787,16691,16204,15900,20249,17710,16728,15897,16720,20263,19757,20683,18099,20684,15874,20258,16602,16810,17921,15976,20264,16223,16369,15917,17074,19643,16948,15910,16350,20685,20288,16336,16230,15921,20686,17068,16861,16123,16398,15962,20314,16653,16175,20266,18148,16511,18112,15949,15883,15795,18220,15906,18176,20267,16951,16872,16316,19705,16900,15943,17034,15933,20268,19714,15781,19899,16635,16988,16227,16755,17084,18158,16781,20269,16009,20270,16813,17222,16794,16203,16236,19884,16964,15930,19860,19911,19910,20271,19723,15829,20260,19865,19918,17191,16729,18193,17122,16442,20272,17111,16318,17110,20273,20324,19785,20275,20276,16229,16915,15798,16955,17155,16450,16789,20277,19655,15945,20278,15803,17118,16598,16400,14316,19923,19925,16945,16956,19799,17690,17088,20279,17141,15791,16699,16978,16524,17166,16648,17161,19927,16409,16843,15936,16523,17730,16805,20281,20282,19877,16220,19788,15797,16381,16792,20283,16011,20284,16916,16271,16279,17172,19795,16322,20286,19862,16284,15951,16761,17123,19813,17877,15973,15801,16301,20287,20289,19883,17691,16835,17143,20290,16292,19673,16323,16734,16547,19754,20291,16680,16014,16935,19790,15994,19872,16055,15782,16090,20389,18080,16402,16975,15822,20292,19781,16459,20350,16836,16559,16216,20293,17008,15819,15823,20294,16991,19827,20399,16942,16075,16068,16380,16851,16465,16084,16573,17059,15824,20295,20296,15939,17012,16980,17738,16191,17007,20299,17017,15820,16525,19836,18170,18037,16254,15843,20301,17114,19791,19738,20300,15970,17087,16582,16410,16817,20302,17023,20514,16824,16487,17117,16488,20359,16130,15852,20303,17030,20305,16760,16710,20304,20360,16308,16897,16471,20307,16993,16253,16745,16274,16267,16475,16067,20310,16667,16878,15862,20306,20311,16399,17140,18076,15865,19717,20316,16238,20312,19808,16779,18111,19871,16568,16332,16505,16060,20317,16715,16551,16494,16304,16502,20442,16869,17170,18219,16013,17878,16768,16194,20318,15834,16569,15905,16088,20319,20321,16758,15894,17712,19863,15861,15907,20308,16959,17142,15788,19731,15825,16017,16433,16303,16411,19758,15889,16023,19751,16913,17154,15911,15916,16821,16659,15847,15919,16245,15924,20309,20325,19691,16829,17152,20327,20328,15809,15925,16976,19890,15929,20313,17127,17132,19659,16387,17713,20329,16791,16875,16809,16076,16024,16825,15948,19700,16026,18143,16357,16526,16746,16599,16007,16773,19900,20331,19674,15844,16834,16051,20391,16905,19711,20336,15913,17094,19637,19903,20338,17158,16594,16079,15816,15932,16249,16062,18195,19866,20339,16326,16748,17156,19880,17103,16437,16394,19763,19904,20334,20341,17796,16654,16990,20343,19708,19885,20346,19906,15886,17765,16036,16495,19766,16909,19907,20347,18062,19853,16787,16899,17173,17876,15941,20323,17805,17895,17014,16058,19869,20352,19909,19722,16874,20509,15995,16601,17037,16555,20353,16783,15863,20326,16812,20356,16852,16984,17157,17996,17225,20363,19741,20364,19917,16446,16690,20332,16711,15898,16240,20365,17939,16264,20368,19777,17701,18086,20333,20374,20377,16436,19656,20367,19818,17252,16441,15805,16867,15901,16584,20382,16619,20384,19651,15908,15903,16320,20386,20393,19778,16877,16828,20395,19926,16558,16027,17075,16268,16072,20398,20400,17100,15855,16672,19792,16642,20401,17828,16187,20372,18206,16776,20406,16029,16226,16478,16992,16299,20375,20407,16407,20408,19797,16452,20411,16335,16319,20415,16392,16170,16470,19809,16235,16790,20379,20340,16118,15835,17720,20388,15839,16466,16456,20342,20417,19679,17036,19648,16484,17990,20528,16251,20418,19668,20530,15928,16043,18199,16987,16077,20419,16565,20422,16818,17753,16709,16704,19776,17838,17164,15946,20425,20459,16795,16339,16100,20531,17862,20461,17872,18020,16031,20345,16485,16595,16650,16302,20430,20431,17130,16324,16766,19755,18191,15891,17887,20532,19660,16382,16570,20349,19669,16325,16472,20433,20435,16735,16111,20533,19685,17096,16209,15790,16083,20444,20445,18205,17215,16239,17129,20446,17177,16480,16626,16801,16510,17054,20536,17901,16431,20451,16131,17780,20456,16859,17951,17781,20468,17189,17937,16064,20503,16225,20727,16019,20728,16491,16879,16021,20523,20534,17226,16632,18147,16513,20535,20538,16022,20544,17131,19638,16533,20551,17098,17153,17187,20553,17804,15810,19688,19748,17101,20559,16534,17989,17099,17808,20560,17097,20563,16025,20564,17184,16670,17982,20568,17160,16439,16073,16610,16048,19786,16629,16344,20467,16463,16429,20376,16931,16010,16522,17227,19840,15922,17991,16604,19639,19746,19677,16996,17109,16006,16412,20537,16366,19804,17136,16287,15990,20470,15914,16351,16082,16218,19873,16288,16737,17107,16109,17093,18146,15972,17018,15789,16663,16190,16572,15854,16707,16438,16354,16802,16560,19721,16770,16125,16003,20539,18059,15963,17134,16528,19847,19680,17220,17035,17656,17139,17073,15873,16854,16893,19692,19807,19878,16454,20474,19867,19859,17055,15993,18157,15884,15992,16585,19892,16844,18182,16300,16002,20540,16045,18183,17002,20477,15833,16455,15890,16530,17974,20170,17836,19868,20040,16032,18200,16575,19715,16912,18169,17964,19756,17016,20180,16231,16946,17071,16193,16405,16503,20186,16694,18172,16248,16098,19838,16963,20193,20479,17029,18190,20200,20542,20543,16508,16713,16124,16962,16157,15860,20402,20545,16919,16266,20547,16678,16390,15876,20404,20548,19864,15813,16037,16028,15783,16290,18097,15818,16174,17027,20550,20405,16702,16871,16837,19641,20557,16403,16840,16838,16532,16896,16796,16315,16607,18185,17218,19718,16257,19794,19806,19848,16876,16347,15793,17944,18082,15954,18087,17764,16624,18187,16675,17159,15831,16509,17000,19745,16033,16730,17223,19654,16059,17843,19676,19779,18188,16811,20482,20483,16970,19747,17125,17095,17163,20486,20487,19767,19646,19894,20492,19734,17005,19645,20410,16891,20489,16908,16771,19922,15953,20494,16744,20621,16362,16898,16700,18167,16832,16108,20495,20496,16756,16995,16662,19816,20498,20500,20502,16517,16718,16763,15938,16819,20504,16888,19647,19687,19913,20505,20506,18178,16926,16448,16866,20510,20511,19769,14269,16759,16447,16979,20513,20518,20519,19820,16903,16644,16717,18196,16389,20520,20521,17718,16826,16643,15785,16445,20525,16393,16630,15869,16732,16712,19821,20529,19810,20648,20649,16882,19817,19857,17180,16753,20650,16906,20651,16673,20652,17086,19682,17149,20655,15987,20656,16726,16772,19858,17144,17147,17146,20658,20659,16657,19662,16424,16848,16697,19733,20660,16855,20662,19770,17769,18175,19713,20663,20666,19812,16936,16803,16638,14268,16918,19800,20667,19724,20668,19846,20669,16128,16564,19752,19826,20670,20671,19712,17923,19653,19725,16543,20673,16853,20413,16846,16714,16870,20674,20676,16708,16923,19783,16778,20678,20679,17183,16902,16973,16943,20680,19736,16797,16716,20414,20681,16863,16974,19805,16504,18074,16858,16894,19706,18194,17192,19842,16652,19698,19908,19749,17004,19916,19876,17928,16910,17167,16590,17700,17119,15777,17963,17715,17179,15999,16127,16833,16588,16634,16661,16731,16641,16998,16786,15935,20687,15814,16929,19845,16622,16884,19744,19703,19735,16683,16618,16723,17151,19710,17692,16636,16676,16591,16890,16823,16782,16969,18132,16860,16548,19815,16986,16930,19670,19690,19681,18186,19675,15991,18159,17947,16156,16645,19743,16148,16953,16911,16754,18221,19837,16625,15845,17698,19830,17221,19671,16677,16103,16215,19825,17699,15792,15859,16724,16158,16460,15880,16999,16285,16094,16296,16101,16053,16293,16933,15866,16385,15895,17693,16122,15796,17186,16627,16180,16184,16428,16822,16476,16479,16514,16639,15878,16397,16244,17039,16689,19843,16614,16396,19726,16160,16234,15909,17042,19684,17062,17077,15912,16364,17980,16952,17716,18165,16144,17171,16868,16461,15944,16066,16617,16425,16628,18198,16904,19644,19759,15857,15817,15882,16542,16664,17104,16173,15984,17019,16377,16600,18075,16469,16015,16527,16277,16413,19793,16140,15836,17121,19728,16989,19852,19657,16483,16845,16966,16961,16620,19667,19695,19737,17106,16692,16615,19661,16807,16847,18145,16703,16107,19784,17861,16665,17061,16541,16637,19839,16917,17175,19882,16310,17986,19798,16857,15779,16129,16743,18016,17994,16733,19768,19773,16873,16603,16695,19663,16674,16133,18192,16346,16957,15780,16921,16423,16655,16944,16696,19762,16925,15887,16765,16701,18179,17871,16740,16972,16686,16414,19850,16613,17694,19780,15872,16981,16924,16747,19658,15811,16725,16434,15786,15815,16932,19832,16928,19732,16592,18180,17185,18077,19789,15904,17148,16679,17217,19750,16449,16440,16727,15975,17091,16927,19707,17711,17714,18197,16684,16862,19801,19823,16574,15778,19897,16589,16516,19664,17135,19704,19672,16967,16237,16519,16512,16971,16666,

}

func main() {
	// Define the MediaID here. Irs required only when executing "RunMediaRelations()"
	mediaIDs := []int{}

	p := NewPipeLineRunner(
		// Define the environment
		EnvironmentProd,
		// EnvironmentStaging,

		// Define the environment specific vertical ID
		TyreVerticalIDProd,
		// ServicingVerticalIDProd,
		// TyreVerticalIDStaging,

		// Define the environment specific variation ID
		TyreVariationIDsProd,
		// ServicingVariationIDsProd,
		// TyreVariationIDsStaging,

		mediaIDs,
		
	)

	// Uncomment only the required function calls and execute the script. Prefer to do one at a time and verify.


// ============================= //
// 		SEQUENCE TO RUN THIS SCRIPT : 
//		 1. Upload the sheet using google sheets
//		 2. Run the location api from postman
//		 3. RunOpsAsset(p)
//		 4. RunPrePostChecks(p)
// ============================= //

	// Attaching variation to op assets
	// RunOpsAsset(p)

	// Attaching checks to variations
	RunPrePostChecks(p)

	// Attach the media relationships
	// RunMediaRelations(p)
}
