package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"strconv"
	"time"
)

const (
	EnvironmentProd    = "prod"
	EnvironmentStaging = "staging"

	PreCheck  string = "pre_check"
	PostCheck string = "post_check"

	CatalogProdUrl          = "https://catalog.cafu.app/api"
	MediaProdUrl            = "https://media.cafu.app/api"
	OperationalAssetProdUrl = "https://operational-assets.cafu.app/api"

	BatteryVerticalIDProd   = "3"
	ServicingVerticalIDProd = "5"
	TyreVerticalIDProd      = "4"

	PhotoCheckIDProd = 1
	NotesCheckIDProd = 2

	CatalogStagingUrl          = "https://catalog.global.staging.cafu.app/api"
	MediaStagingUrl            = "https://media.global.staging.cafu.app/api"
	OperationalAssetStagingUrl = "https://operational-assets.global.staging.cafu.app/api"

	BatteryVerticalIDStaging   = "22"
	ServicingVerticalIDStaging = "24"
	TyreVerticalIDStaging      = "23"

	PhotoCheckIDStaging = 34
	NotesCheckIDStaging = 35
)

type Product struct {
	ProductID int `json:"product_id"`
}

type PayloadBody struct {
	Products []Product `json:"products"`
}

type OpsAsset struct {
	ID uint `json:"id"`
}

type OpsAssetsResp struct {
	Data []OpsAsset `json:"data"`
}

type Check struct {
	CheckID    int    `json:"check_id"`
	Category   string `json:"category"`
	IsRequired bool   `json:"is_required"`
}

type MediaRelation struct {
	OwnerID      string `json:"owner_id"`
	OwnerType    string `json:"owner_type"`
	OwnerService string `json:"owner_service"`
}

type PipelineRunner struct {
	pool   chan struct{}
	client *http.Client

	CatalogUrl           string
	MediaUrl             string
	OperationalAssetsUrl string

	VariationIDs []int
	VerticalID   string

	PhotoCheckID int
	NotesCheckID int

	// MediaIDs is the media id of the catalog item which should be attached to all its variations
	MediaIDs []int
}

func NewPipeLineRunner(env string, verticalID string, variationIDs []int, mediaIDs []int) *PipelineRunner {
	if env == EnvironmentProd {
		return &PipelineRunner{
			pool:                 make(chan struct{}, 3),
			client:               &http.Client{},
			CatalogUrl:           CatalogProdUrl,
			MediaUrl:             MediaProdUrl,
			OperationalAssetsUrl: OperationalAssetProdUrl,
			VariationIDs:         variationIDs,
			VerticalID:           verticalID,
			PhotoCheckID:         PhotoCheckIDProd,
			NotesCheckID:         NotesCheckIDProd,
			MediaIDs:             mediaIDs,
		}
	}

	return &PipelineRunner{
		pool:                 make(chan struct{}, 3),
		client:               &http.Client{},
		CatalogUrl:           CatalogStagingUrl,
		MediaUrl:             MediaStagingUrl,
		OperationalAssetsUrl: OperationalAssetStagingUrl,
		VariationIDs:         variationIDs,
		VerticalID:           verticalID,
		PhotoCheckID:         PhotoCheckIDStaging,
		NotesCheckID:         NotesCheckIDStaging,
		MediaIDs:             mediaIDs,
	}
}

func (p *PipelineRunner) Add() {
	p.pool <- struct{}{}
}

func (p *PipelineRunner) Release() {
	<-p.pool
}

func (p *PipelineRunner) GetAssetIDs() []uint {
	serviceID := p.VerticalID
	baseUrl := p.OperationalAssetsUrl

	url := fmt.Sprintf("%s/v1/operational-assets/?service_ids=%s&page=1&per_page=100",
		baseUrl, serviceID)
	fmt.Println("url***\n", url)

	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		log.Fatalf("Error creating new http req: %v", err)
	}

	req.Header.Set("Content-Type", "application/json")

	resp, err := p.client.Do(req)
	if err != nil {
		panic(err)
	}

	defer resp.Body.Close()

	fmt.Println("Response Status for the getOpsAssetIDs:", resp.Status)

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Fatalf("Error reading response body: %v", err)
	}

	var opsAssetResp OpsAssetsResp

	err = json.Unmarshal(body, &opsAssetResp)
	if err != nil {
		log.Fatalf("Error unmarshaling JSON response: %v", err)
	}

	var assetIDs []uint
	for _, asset := range opsAssetResp.Data {
		assetIDs = append(assetIDs, asset.ID)
	}

	// Print the unmarshalled data
	// fmt.Println("AssetIDs are:", assetIDs)

	return assetIDs
}

func (p *PipelineRunner) MapAssetsToVariations(assetID string) {
	variationIDs := p.VariationIDs
	baseUrl := p.OperationalAssetsUrl

	fmt.Println("printing assetID", assetID)

	p.Add()

	go func() {
		defer p.Release()

		url := fmt.Sprintf("%s/v1/operational-assets/%s", baseUrl, assetID)

		fmt.Println("url***\n", url)

		var products []Product
		for _, variationID := range variationIDs {
			products = append(products, Product{ProductID: variationID})
		}

		payload := PayloadBody{Products: products}

		// Marshal the payload to JSON
		jsonData, err := json.MarshalIndent(payload, "", "  ")
		if err != nil {
			log.Fatalf("Error marshaling payload to JSON: %v", err)
		}

		// Print or save the JSON payload to a file
		// fmt.Println(string(jsonData), "payload is")

		req, err := http.NewRequest("PATCH", url, bytes.NewBuffer(jsonData))
		if err != nil {
			panic(err)
		}

		req.Header.Set("Content-Type", "application/json")

		resp, err := p.client.Do(req)
		if err != nil {
			panic(err)
		}

		defer resp.Body.Close()

		fmt.Println("response Status:", resp.Status, assetID)

		if resp.StatusCode == http.StatusServiceUnavailable || resp.StatusCode == http.StatusBadGateway {
			time.Sleep(30 * time.Second)
		}
	}()
}

func (p *PipelineRunner) MapChecksToVariations(variationID int) {
	fmt.Println("Printing variationID", variationID)

	baseUrl := p.CatalogUrl
	photo := p.PhotoCheckID
	notes := p.NotesCheckID

	checkIDs := []int{photo, notes}
	checks := []string{PreCheck, PostCheck}

	p.Add()

	go func() {
		defer p.Release()

		for _, checkStage := range checks {
			for _, checkID := range checkIDs {
				checkPayload := Check{
					CheckID:    checkID,
					Category:   checkStage,
					IsRequired: false,
				}

				if checkPayload.CheckID == photo {
					checkPayload.IsRequired = true
				}

				fmt.Println("Payload for checks mapping is", checkPayload)
				url := fmt.Sprintf("%s/v1/variations/%d/checks",
					baseUrl, variationID)

				fmt.Println("url***\n", url)

				// Marshal the payload to JSON
				jsonData, err := json.MarshalIndent(checkPayload, "", "  ")
				if err != nil {
					log.Fatalf("Error marshaling payload to JSON: %v", err)
					continue
				}

				// Print or save the JSON payload to a file
				fmt.Println("Payload is", string(jsonData))

				req, err := http.NewRequest("POST", url, bytes.NewBuffer(jsonData))
				if err != nil {
					log.Printf("Error creating request: %v", err)
					continue
				}

				req.Header.Set("Content-Type", "application/json")

				resp, err := p.client.Do(req)
				if err != nil {
					log.Printf("Error sending request: %v", err)
					continue
				}

				defer resp.Body.Close()

				fmt.Printf("*** Response status: %s & variationID: %d ***\n", resp.Status, variationID)

				if resp.StatusCode == http.StatusServiceUnavailable || resp.StatusCode == http.StatusBadGateway {
					time.Sleep(30 * time.Second)
				}
			}
		}
	}()
}

func (p *PipelineRunner) MapMediaToVariations(variationID int) {
	fmt.Println("Printing variationID", variationID)

	variationIDStr := strconv.Itoa(variationID)
	baseUrl := p.MediaUrl
	mediaIDs := p.MediaIDs

	p.Add()

	go func() {
		defer p.Release()

		for _, mediaID := range mediaIDs {
			mediaPayload := MediaRelation{
				OwnerID:      variationIDStr,
				OwnerType:    "variations",
				OwnerService: "catalog",
			}

			fmt.Println("Payload for media mapping is", mediaPayload)

			url := fmt.Sprintf("%s/v1/media/%d/relations", baseUrl, mediaID)

			fmt.Println("url***\n", url)

			// Marshal the payload to JSON
			jsonData, err := json.MarshalIndent(mediaPayload, "", "  ")
			if err != nil {
				log.Fatalf("Error marshaling payload to JSON: %v", err)
				continue
			}

			// Print or save the JSON payload to a file
			fmt.Println("Payload is", string(jsonData))

			req, err := http.NewRequest("POST", url, bytes.NewBuffer(jsonData))
			if err != nil {
				log.Printf("Error creating request: %v", err)
				continue
			}

			req.Header.Set("Content-Type", "application/json")

			resp, err := p.client.Do(req)
			if err != nil {
				log.Printf("Error sending request: %v", err)
				continue
			}

			defer resp.Body.Close()

			fmt.Println("Response Status:", resp.Status, variationID)

			if resp.StatusCode == http.StatusServiceUnavailable || resp.StatusCode == http.StatusBadGateway {
				time.Sleep(30 * time.Second)
			}
		}
	}()
}

func RunOpsAsset(p *PipelineRunner) {
	opsAssetIDs := p.GetAssetIDs()
	fmt.Println("AssetIDs are", opsAssetIDs)

	fmt.Println("VariationIDs are", p.VariationIDs)

	if len(opsAssetIDs) == 0 {
		fmt.Println("Returning as no operational assetIDs present for given service_id")
		return
	}

	for i := 0; i < len(opsAssetIDs); i++ {
		p.MapAssetsToVariations(strconv.Itoa(int(opsAssetIDs[i])))

		if i%10 == 0 {
			time.Sleep(1 * time.Second)
		}
	}

	time.Sleep(10 * time.Second)
}

func RunPrePostChecks(p *PipelineRunner) {
	variationIDs := p.VariationIDs

	for i := 0; i < len(variationIDs); i++ {
		p.MapChecksToVariations(variationIDs[i])

		if i%10 == 0 {
			time.Sleep(1 * time.Second)
		}
	}

	time.Sleep(30 * time.Second)
}

func RunMediaRelations(p *PipelineRunner) {
	variationIDs := p.VariationIDs

	for i := 0; i < len(variationIDs); i++ {
		p.MapMediaToVariations(variationIDs[i])

		if i%10 == 0 {
			time.Sleep(1 * time.Second)
		}
	}

	time.Sleep(10 * time.Second)
}

/***
	DON'T NEED TO MODIFY ANYTHING ABOVE THIS LINE UNLESS TO CHANGE THE FUNCTIONALITY
***/

/*
Follow these steps to get the IDs list.
1. Get the item_id(s) from item_verticals based on the {Battery/Servicing/Tyre}VerticalID{Prod/Staging}
	SELECT
		STRING_AGG(item_id::text, ',') AS item_ids
	FROM
		item_verticals iv
	WHERE
		iv.vertical_id = 23; // Eg: Tyre vertical ID in staging.

2. Get the ids from variations table based on the item_id(s) from step 1.
	SELECT
		STRING_AGG(id::text, ',') AS ids
	FROM
		variations v
	WHERE
		v.item_id = 68; // Eg: Economy catalog item ID in prod.
*/

// Get the latest list from DB and include all of them here (existing and newly added ones)
var BatteryVariationIDsProd = []int{
	233, 229, 239, 230, 227, 232, 71, 86, 95, 96, 75, 78, 90, 93, 74, 85, 92, 94, 83, 98, 79, 82, 76, 80, 77, 88, 91, 72, 81, 84, 87, 241, 228, 242, 234, 240, 243, 238, 628, 236, 97, 231, 235, 73, 89, 237,
}

// Get the latest list from DB and include all of them here (existing and newly added ones)
var ServicingVariationIDsProd = []int{
	// 5, 277, 330, 335, 309, 306, 278, 265, 635, 313, 261, 272, 318, 304, 326, 308, 298, 289, 266, 279, 636, 637, 638, 639, 286, 640, 641, 642, 643, 644, 645, 646, 262, 294, 333, 259, 297, 273, 287, 291, 267, 268, 311, 320, 303, 302, 269, 327, 263, 270, 288, 324, 328, 321, 284, 305, 332, 299, 283, 276, 312, 331, 281, 292, 317, 271, 310, 316, 300, 323, 280, 295, 325, 275, 285, 260, 264, 274, 282, 293, 296, 301, 307, 314, 315, 319, 322, 329, 334, 352, 343, 409, 340, 375, 370, 374, 360, 388, 402, 347, 358, 383, 366, 394, 408, 345, 372, 364, 381, 346, 350, 336, 411, 341, 413, 365, 361, 391, 362, 344, 390, 399, 342, 378, 368, 357, 380, 385, 377, 367, 369, 389, 338, 387, 354, 404, 401, 403, 410, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 353, 355, 373, 356, 359, 398, 371, 400, 406, 363, 376, 379, 382, 384, 386, 392, 393, 395, 397, 405, 407, 412, 337, 339, 348, 349, 351, 502, 486, 503, 493, 495, 456, 446, 488, 483, 416, 470, 474, 429, 463, 454, 435, 462, 508, 439, 432, 428, 423, 482, 458, 448, 440, 491, 455, 500, 441, 420, 426, 461, 442, 419, 467, 453, 449, 436, 477, 468, 460, 443, 465, 425, 444, 499, 434, 485, 418, 430, 479, 494, 505, 489, 414, 451, 498, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 415, 417, 421, 422, 424, 427, 431, 433, 437, 438, 445, 447, 450, 452, 457, 459, 464, 466, 471, 472, 475, 476, 478, 480, 481, 484, 487, 490, 492, 496, 497, 501, 506, 507, 509,
5,2185,2064,2150,326,564,275,311,557,561,298,320,513,2061,563,297,329,535,559,2049,560,294,555,2147,261,2170,268,281,515,310,544,565,128,278,312,532,539,566,263,2070,130,571,2058,127,277,520,522,554,640,2048,287,308,518,545,567,568,639,2068,131,136,293,550,2171,581,2053,548,582,284,285,309,512,527,573,2071,317,517,546,2151,580,574,642,300,637,259,295,325,2149,145,137,274,132,143,292,290,139,2056,129,135,2152,323,579,643,302,322,264,541,645,2060,328,529,2051,549,134,273,551,523,2063,2066,305,569,314,537,3499,3500,3501,3502,3503,3504,3505,3506,3507,3508,3509,3510,3511,3512,3513,3514,3515,3516,3517,2055,2069,291,335,266,299,330,562,577,514,570,519,646,265,282,536,327,270,313,142,146,316,141,578,126,576,543,303,307,538,525,301,306,333,540,2054,2050,2148,2047,2065,2067,2169,318,279,542,148,140,572,524,553,644,324,534,575,635,315,276,319,530,547,558,641,144,267,638,334,2059,2057,2146,283,511,260,133,147,289,531,526,321,556,269,280,516,138,636,2052,304,288,521,271,125,296,272,533,528,332,331,552,286,262,2062,362,363,365,387,2075,162,151,336,337,351,352,358,364,149,2094,403,2091,2177,372,379,347,375,386,653,2098,176,382,399,647,2078,182,181,165,167,338,344,163,2153,179,343,353,410,2173,174,657,2079,152,349,374,385,164,2076,2154,651,2083,2093,371,171,366,373,2155,648,169,2072,2080,2092,342,392,2087,159,377,2096,2156,341,400,408,2172,654,183,173,397,413,2082,168,383,656,2085,650,405,2077,155,396,339,150,354,390,2174,3518,3519,3520,3521,3522,3523,3524,3525,3526,3527,3528,3529,3530,3531,3532,3533,3534,3535,3536,3537,384,172,2159,153,178,404,166,2175,2176,369,378,407,2088,2073,412,350,2081,158,177,649,175,348,360,406,170,355,401,160,380,376,357,411,409,389,394,180,156,361,381,652,346,356,367,395,398,370,388,402,154,161,345,391,340,359,393,368,2090,2089,157,2097,2074,2160,2084,2095,655,2157,2158,2161,2086,470,485,504,658,663,430,217,673,676,2106,225,451,460,681,662,2121,456,2122,486,203,226,445,436,483,496,449,2167,2101,434,212,476,500,2103,2113,2115,201,426,439,498,184,427,440,441,477,479,446,494,508,207,221,186,199,204,222,192,469,419,454,493,675,503,224,435,2112,2114,495,497,491,2165,2109,2116,2124,461,2183,674,210,463,2120,487,2163,2119,2102,661,448,471,2117,185,502,2104,195,416,422,432,466,668,671,206,447,481,499,219,223,431,501,664,670,677,678,680,2123,205,213,415,428,666,2184,191,421,474,478,2110,2111,2162,468,480,489,659,193,209,218,423,492,679,197,208,215,420,672,187,443,459,473,669,2181,190,211,442,425,433,464,472,2166,2180,437,438,188,457,2099,189,200,417,214,458,484,424,444,509,665,667,198,429,462,482,488,660,2168,194,414,450,475,490,202,216,452,2100,2107,196,418,455,2105,2164,453,2118,2178,2179,507,506,2182,2108,467,465,3538,3539,3540,3541,3542,3543,3544,3545,3546,3547,3548,3549,3550,3551,3552,3553,3554,3555,3556,3557,220,505,510,






}

// Get the latest list from DB and include all of them here (existing and newly added ones)
var TyreVariationIDsProd = []int{
	
}

// Get the latest list from DB and include all of them here (existing and newly added ones)
var BatteryVariationIDsStaging = []int{
	13198, 13194, 13212, 13206, 13674, 13671, 13684, 17292, 13203, 13190, 13202, 13208, 13191, 13201, 13213, 13681, 13676, 13679, 13205, 13207, 13193, 13200, 13204, 13211, 13680, 13672, 13188, 13210, 13195, 13196, 13214, 13685, 13192, 13669, 13670, 13682, 13673, 13677, 13675, 13678, 13199, 13189, 13683, 13197, 13209,
}

// Get the latest list from DB and include all of them here (existing and newly added ones)
var ServicingVariationIDsStaging = []int{
	13708, 13709, 13710, 13711, 13712, 13713, 13714, 13715, 13716, 13717, 13718, 13719, 13720, 13721, 13722, 13723, 13724, 13725, 13726, 13727, 13728, 13729, 13730, 13731, 13732, 13733, 13734, 13735, 13736, 13737, 13738, 13739, 13740, 13741, 13742, 13743, 13744, 13745, 13746, 13747, 13748, 13749, 13750, 13751, 13752, 13753, 13754, 13755, 13756, 13757, 13758, 13759, 13760, 13761, 13762, 13763, 13764, 13765, 13766, 13767, 13768, 13769, 13770, 13771, 13772, 13773, 13774, 13775, 13776, 13777, 13778, 13779, 13780, 13781, 13782, 13783, 13784, 13785, 13786, 13787, 13788, 13789, 13790, 13791, 13792, 13793, 13794, 13795, 13796, 13797, 13798, 13799, 13800, 13801, 13802, 13803, 13804, 13805, 13806, 13807, 13808, 13809, 13810, 13811, 13812, 13813, 13814, 13815, 13816, 13817, 13818, 13819, 13820, 13821, 13822, 13823, 13824, 13825, 13826, 13827, 13828, 13829, 13830, 13831, 13832, 13833, 13834, 13835, 13836, 13837, 13838, 13839, 13840, 13841, 13842, 13843, 13844, 13845, 13846, 13847, 13848, 13849, 13850, 13851, 13852, 13853, 13854, 13855, 13856, 13857, 13858, 13859, 13860, 13861, 13862, 13863, 13864, 13865, 13866, 13867, 13868, 13869, 13870, 13871, 13872, 13873, 13874, 13875, 13876, 13877, 13878, 13879, 13880, 13881, 13882, 13883, 13884, 13885, 13886, 13887, 13888, 13889, 13890, 13891, 13892, 13893, 13894, 13895, 13896, 13897, 13898, 13899, 13900, 13901, 13902, 13903, 13904, 13905, 13906, 13907, 13908, 13909, 13910, 13911, 13912, 13913, 13914, 13915, 13916, 13917, 13918, 13919, 13920, 13921, 13922, 13923, 13924, 13925, 13926, 13927, 13928, 13929, 13930, 13931, 13932, 13933, 13934, 13935, 13936, 13937, 13938, 13939, 13940, 13941, 13942, 13943, 13944, 13945, 13946, 13947, 13948, 13949, 13950, 13951, 13952, 13953, 13954, 13955, 13956, 13957, 13958, 14036, 17254, 17255, 17256, 17257, 17258, 17259, 17260, 17261, 17262, 17263, 17264, 17265, 17266, 17267, 17268, 17269, 17270, 17271, 17272, 17273, 17274, 17275, 17276, 17277, 17278, 17279, 17280, 17281, 17282, 17283, 17284, 17285, 17286, 17287, 17288, 17289, 17290, 17291,
}

// Get the latest list from DB and include all of them here (existing and newly added ones)
var TyreVariationIDsStaging = []int{
	86, 14268, 14269, 14316, 15739, 15777, 15778, 15779, 15780, 15781, 15782, 15783, 15784, 15785, 15786, 15787, 15788, 15789, 15790, 15791, 15792, 15793, 15794, 15795, 15796, 15797, 15798, 15799, 15800, 15801, 15802, 15803, 15804, 15805, 15806, 15807, 15808, 15809, 15810, 15811, 15812, 15813, 15814, 15815, 15816, 15817, 15818, 15819, 15820, 15821, 15822, 15823, 15824, 15825, 15826, 15827, 15828, 15829, 15830, 15831, 15832, 15833, 15834, 15835, 15836, 15837, 15838, 15839, 15840, 15841, 15842, 15843, 15844, 15845, 15846, 15847, 15848, 15849, 15850, 15851, 15852, 15853, 15854, 15855, 15856, 15857, 15858, 15859, 15860, 15861, 15862, 15863, 15864, 15865, 15866, 15867, 15868, 15869, 15870, 15871, 15872, 15873, 15874, 15875, 15876, 15877, 15878, 15879, 15880, 15881, 15882, 15883, 15884, 15885, 15886, 15887, 15888, 15889, 15890, 15891, 15892, 15893, 15894, 15895, 15896, 15897, 15898, 15899, 15900, 15901, 15902, 15903, 15904, 15905, 15906, 15907, 15908, 15909, 15910, 15911, 15912, 15913, 15914, 15915, 15916, 15917, 15918, 15919, 15920, 15921, 15922, 15923, 15924, 15925, 15926, 15927, 15928, 15929, 15930, 15931, 15932, 15933, 15934, 15935, 15936, 15937, 15938, 15939, 15940, 15941, 15942, 15943, 15944, 15945, 15946, 15947, 15948, 15949, 15950, 15951, 15952, 15953, 15954, 15955, 15956, 15957, 15958, 15959, 15960, 15961, 15962, 15963, 15964, 15965, 15966, 15967, 15968, 15969, 15970, 15971, 15972, 15973, 15974, 15975, 15976, 15977, 15978, 15979, 15980, 15981, 15982, 15983, 15984, 15985, 15986, 15987, 15988, 15989, 15990, 15991, 15992, 15993, 15994, 15995, 15996, 15997, 15998, 15999, 16000, 16001, 16002, 16003, 16004, 16005, 16006, 16007, 16008, 16009, 16010, 16011, 16012, 16013, 16014, 16015, 16016, 16017, 16018, 16019, 16020, 16021, 16022, 16023, 16024, 16025, 16026, 16027, 16028, 16029, 16030, 16031, 16032, 16033, 16034, 16035, 16036, 16037, 16038, 16039, 16040, 16041, 16042, 16043, 16044, 16045, 16046, 16047, 16048, 16049, 16050, 16051, 16052, 16053, 16054, 16055, 16056, 16057, 16058, 16059, 16060, 16061, 16062, 16063, 16064, 16065, 16066, 16067, 16068, 16069, 16070, 16071, 16072, 16073, 16074, 16075, 16076, 16077, 16078, 16079, 16080, 16081, 16082, 16083, 16084, 16085, 16086, 16087, 16088, 16089, 16090, 16091, 16092, 16093, 16094, 16095, 16096, 16097, 16098, 16099, 16100, 16101, 16102, 16103, 16104, 16105, 16106, 16107, 16108, 16109, 16110, 16111, 16112, 16113, 16114, 16115, 16116, 16117, 16118, 16119, 16120, 16121, 16122, 16123, 16124, 16125, 16126, 16127, 16128, 16129, 16130, 16131, 16132, 16133, 16134, 16135, 16136, 16137, 16138, 16139, 16140, 16141, 16142, 16143, 16144, 16145, 16146, 16147, 16148, 16149, 16150, 16151, 16152, 16153, 16154, 16155, 16156, 16157, 16158, 16159, 16160, 16161, 16162, 16163, 16164, 16165, 16166, 16167, 16168, 16169, 16170, 16171, 16172, 16173, 16174, 16175, 16176, 16177, 16178, 16179, 16180, 16181, 16182, 16183, 16184, 16185, 16186, 16187, 16188, 16189, 16190, 16191, 16192, 16193, 16194, 16195, 16196, 16197, 16198, 16199, 16200, 16201, 16202, 16203, 16204, 16205, 16206, 16207, 16208, 16209, 16210, 16211, 16212, 16213, 16214, 16215, 16216, 16217, 16218, 16219, 16220, 16221, 16222, 16223, 16224, 16225, 16226, 16227, 16228, 16229, 16230, 16231, 16232, 16233, 16234, 16235, 16236, 16237, 16238, 16239, 16240, 16241, 16242, 16243, 16244, 16245, 16246, 16247, 16248, 16249, 16250, 16251, 16252, 16253, 16254, 16255, 16256, 16257, 16258, 16259, 16260, 16261, 16262, 16263, 16264, 16265, 16266, 16267, 16268, 16269, 16270, 16271, 16272, 16273, 16274, 16275, 16276, 16277, 16278, 16279, 16280, 16281, 16282, 16283, 16284, 16285, 16286, 16287, 16288, 16289, 16290, 16291, 16292, 16293, 16294, 16295, 16296, 16297, 16298, 16299, 16300, 16301, 16302, 16303, 16304, 16305, 16306, 16307, 16308, 16309, 16310, 16311, 16312, 16313, 16314, 16315, 16316, 16317, 16318, 16319, 16320, 16321, 16322, 16323, 16324, 16325, 16326, 16327, 16328, 16329, 16330, 16331, 16332, 16333, 16334, 16335, 16336, 16337, 16338, 16339, 16340, 16341, 16342, 16343, 16344, 16345, 16346, 16347, 16348, 16349, 16350, 16351, 16352, 16353, 16354, 16355, 16356, 16357, 16358, 16359, 16360, 16361, 16362, 16363, 16364, 16365, 16366, 16367, 16368, 16369, 16370, 16371, 16372, 16373, 16374, 16375, 16376, 16377, 16378, 16379, 16380, 16381, 16382, 16383, 16384, 16385, 16386, 16387, 16388, 16389, 16390, 16391, 16392, 16393, 16394, 16395, 16396, 16397, 16398, 16399, 16400, 16401, 16402, 16403, 16404, 16405, 16406, 16407, 16408, 16409, 16410, 16411, 16412, 16413, 16414, 16415, 16416, 16417, 16418, 16419, 16420, 16421, 16422, 16423, 16424, 16425, 16426, 16427, 16428, 16429, 16430, 16431, 16432, 16433, 16434, 16435, 16436, 16437, 16438, 16439, 16440, 16441, 16442, 16443, 16444, 16445, 16446, 16447, 16448, 16449, 16450, 16451, 16452, 16453, 16454, 16455, 16456, 16457, 16458, 16459, 16460, 16461, 16462, 16463, 16464, 16465, 16466, 16467, 16468, 16469, 16470, 16471, 16472, 16473, 16474, 16475, 16476, 16477, 16478, 16479, 16480, 16481, 16482, 16483, 16484, 16485, 16486, 16487, 16488, 16489, 16490, 16491, 16492, 16493, 16494, 16495, 16496, 16497, 16498, 16499, 16500, 16501, 16502, 16503, 16504, 16505, 16506, 16507, 16508, 16509, 16510, 16511, 16512, 16513, 16514, 16515, 16516, 16517, 16518, 16519, 16520, 16521, 16522, 16523, 16524, 16525, 16526, 16527, 16528, 16529, 16530, 16531, 16532, 16533, 16534, 16535, 16536, 16537, 16538, 16539, 16540, 16541, 16542, 16543, 16544, 16545, 16546, 16547, 16548, 16549, 16550, 16551, 16552, 16553, 16554, 16555, 16556, 16557, 16558, 16559, 16560, 16561, 16562, 16563, 16564, 16565, 16566, 16567, 16568, 16569, 16570, 16571, 16572, 16573, 16574, 16575, 16576, 16577, 16578, 16579, 16580, 16581, 16582, 16583, 16584, 16585, 16586, 16587, 16588, 16589, 16590, 16591, 16592, 16593, 16594, 16595, 16597, 16598, 16599, 16600, 16601, 16602, 16603, 16604, 16605, 16606, 16607, 16608, 16609, 16610, 16611, 16612, 16613, 16614, 16615, 16616, 16617, 16618, 16619, 16620, 16621, 16622, 16623, 16624, 16625, 16626, 16627, 16628, 16629, 16630, 16631, 16632, 16633, 16634, 16635, 16636, 16637, 16638, 16639, 16640, 16641, 16642, 16643, 16644, 16645, 16646, 16647, 16648, 16649, 16650, 16651, 16652, 16653, 16654, 16655, 16656, 16657, 16658, 16659, 16660, 16661, 16662, 16663, 16664, 16665, 16666, 16667, 16668, 16669, 16670, 16671, 16672, 16673, 16674, 16675, 16676, 16677, 16678, 16679, 16680, 16681, 16682, 16683, 16684, 16685, 16686, 16687, 16688, 16689, 16690, 16691, 16692, 16693, 16694, 16695, 16696, 16697, 16698, 16699, 16700, 16701, 16702, 16703, 16704, 16705, 16706, 16707, 16708, 16709, 16710, 16711, 16712, 16713, 16714, 16715, 16716, 16717, 16718, 16719, 16720, 16721, 16722, 16723, 16724, 16725, 16726, 16727, 16728, 16729, 16730, 16731, 16732, 16733, 16734, 16735, 16736, 16737, 16738, 16739, 16740, 16741, 16742, 16743, 16744, 16745, 16746, 16747, 16748, 16749, 16750, 16751, 16752, 16753, 16754, 16755, 16756, 16757, 16758, 16759, 16760, 16761, 16762, 16763, 16764, 16765, 16766, 16767, 16768, 16769, 16770, 16771, 16772, 16773, 16774, 16775, 16776, 16777, 16778, 16779, 16780, 16781, 16782, 16783, 16784, 16785, 16786, 16787, 16788, 16789, 16790, 16791, 16792, 16793, 16794, 16795, 16796, 16797, 16798, 16799, 16800, 16801, 16802, 16803, 16804, 16805, 16806, 16807, 16808, 16809, 16810, 16811, 16812, 16813, 16814, 16815, 16816, 16817, 16818, 16819, 16820, 16821, 16822, 16823, 16824, 16825, 16826, 16827, 16828, 16829, 16830, 16831, 16832, 16833, 16834, 16835, 16836, 16837, 16838, 16839, 16840, 16841, 16842, 16843, 16844, 16845, 16846, 16847, 16848, 16849, 16850, 16851, 16852, 16853, 16854, 16855, 16856, 16857, 16858, 16859, 16860, 16861, 16862, 16863, 16864, 16865, 16866, 16867, 16868, 16869, 16870, 16871, 16872, 16873, 16874, 16875, 16876, 16877, 16878, 16879, 16880, 16881, 16882, 16883, 16884, 16885, 16886, 16887, 16888, 16889, 16890, 16891, 16892, 16893, 16894, 16895, 16896, 16897, 16898, 16899, 16900, 16901, 16902, 16903, 16904, 16905, 16906, 16907, 16908, 16909, 16910, 16911, 16912, 16913, 16914, 16915, 16916, 16917, 16918, 16919, 16920, 16921, 16922, 16923, 16924, 16925, 16926, 16927, 16928, 16929, 16930, 16931, 16932, 16933, 16935, 16936, 16937, 16938, 16941, 16942, 16943, 16944, 16945, 16946, 16947, 16948, 16949, 16950, 16951, 16952, 16953, 16954, 16955, 16956, 16957, 16959, 16960, 16961, 16962, 16963, 16964, 16965, 16966, 16967, 16968, 16969, 16970, 16971, 16972, 16973, 16974, 16975, 16976, 16977, 16978, 16979, 16980, 16981, 16982, 16983, 16984, 16985, 16986, 16987, 16988, 16989, 16990, 16991, 16992, 16993, 16994, 16995, 16996, 16997, 16998, 16999, 17000, 17001, 17002, 17003, 17004, 17005, 17006, 17007, 17008, 17009, 17010, 17011, 17012, 17013, 17014, 17015, 17016, 17017, 17018, 17019, 17020, 17021, 17022, 17023, 17024, 17025, 17026, 17027, 17028, 17029, 17030, 17031, 17032, 17033, 17034, 17035, 17036, 17037, 17038, 17039, 17040, 17041, 17042, 17043, 17044, 17045, 17046, 17047, 17048, 17049, 17050, 17051, 17052, 17053, 17054, 17055, 17056, 17057, 17058, 17059, 17060, 17061, 17062, 17063, 17064, 17065, 17066, 17067, 17068, 17069, 17070, 17071, 17072, 17073, 17074, 17075, 17076, 17077, 17078, 17079, 17080, 17081, 17082, 17083, 17084, 17085, 17086, 17087, 17088, 17089, 17090, 17091, 17092, 17093, 17094, 17095, 17096, 17097, 17098, 17099, 17100, 17101, 17102, 17103, 17104, 17105, 17106, 17107, 17108, 17109, 17110, 17111, 17112, 17113, 17114, 17115, 17116, 17117, 17118, 17119, 17120, 17121, 17122, 17123, 17124, 17125, 17126, 17127, 17128, 17129, 17130, 17131, 17132, 17133, 17134, 17135, 17136, 17137, 17138, 17139, 17140, 17141, 17142, 17143, 17144, 17145, 17146, 17147, 17148, 17149, 17150, 17151, 17152, 17153, 17154, 17155, 17156, 17157, 17158, 17159, 17160, 17161, 17162, 17163, 17164, 17165, 17166, 17167, 17168, 17169, 17170, 17171, 17172, 17173, 17174, 17175, 17177, 17178, 17179, 17180, 17181, 17182, 17183, 17184, 17185, 17186, 17187, 17188, 17189, 17190, 17191, 17192, 17215, 17216, 17217, 17218, 17219, 17220, 17221, 17222, 17223, 17224, 17225, 17226, 17227,
}

func main() {
	// Define the MediaID here. Irs required only when executing "RunMediaRelations()"
	mediaIDs := []int{}

	p := NewPipeLineRunner(
		// Define the environment
		EnvironmentProd,
		// EnvironmentStaging,

		// Define the environment specific vertical ID
		// TyreVerticalIDProd,
		ServicingVerticalIDProd,
		// TyreVerticalIDStaging,

		// Define the environment specific variation ID
		// TyreVariationIDsProd,
		ServicingVariationIDsProd,
		// TyreVariationIDsStaging,

		mediaIDs,
		
	)

	// Uncomment only the required function calls and execute the script. Prefer to do one at a time and verify.

	// Attaching variation to op assets
	// RunOpsAsset(p)

	// Attaching checks to variations
	// RunPrePostChecks(p)

	// Attach the media relationships
	// RunMediaRelations(p)
}
